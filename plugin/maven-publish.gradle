apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'signing'

tasks.matching({ it instanceof Jar }).all {
    baseName ARTIFACT_NAME
}

def isReleaseBuild() {
    logger.info("is release buid: ${!VERSION_NAME.contains("SNAPSHOT")}")
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    def result

    if (hasProperty('PUBLISH_REPO_OVERRIDE')) {
        result = PUBLISH_REPO_OVERRIDE
    } else {
        result = RELEASE_REPOSITORY_URL
    }
    println "release publish repo: $result"
    result
}

def getSnapshotRepositoryUrl() {
    def result

    if (hasProperty('PUBLISH_REPO_OVERRIDE')) {
        result = PUBLISH_REPO_OVERRIDE
    } else {
        result = SNAPSHOT_REPOSITORY_URL
    }
    println "snapshot publish repo: $result"
    result
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

signing {
    sign configurations.archives
}


artifacts {
    archives sourceJar
    archives javadocJar
}

//publish to Maven -> ./gradlew uploadArchives

gradle.taskGraph.whenReady { taskGraph ->
    signArchives.onlyIf {
        isReleaseBuild() && gradle.taskGraph.getAllTasks().find({ it.name == "uploadArchives" }) != null
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            pom.groupId = GROUP
            pom.artifactId = ARTIFACT_NAME
            pom.version = VERSION_NAME

            repository(url: getReleaseRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            snapshotRepository(url: getSnapshotRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.project {
                name POM_NAME
                description POM_DESCRIPTION
                url POM_URL
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                scm {
                    url POM_SCM_URL
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }

        }
    }
}