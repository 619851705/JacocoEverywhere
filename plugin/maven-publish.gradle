apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'signing'

tasks.matching({ it instanceof Jar }).all {
    baseName ARTIFACT_NAME
}

def isReleaseBuild() {
    logger.info("is release buid: ${!VERSION_NAME.contains("SNAPSHOT")}")
    return !VERSION_NAME.contains("SNAPSHOT")
}

def resolvePublishRepository() {
    def result

    if (hasProperty('PUBLISH_REPO_OVERRIDE')) {
        result = PUBLISH_REPO_OVERRIDE
    } else {
        if (isReleaseBuild()) {
            result = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        } else {
            result = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    println "resolved publish repo: $result"

    result
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

signing {
    sign configurations.archives
}


artifacts {
    archives sourceJar
    archives javadocJar
}

gradle.taskGraph.whenReady { taskGraph ->
    signArchives.onlyIf {
        isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives")
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: resolvePublishRepository())
            pom.groupId = GROUP
            pom.artifactId = ARTIFACT_NAME
            pom.version = VERSION_NAME
            pom.project {
                name POM_NAME
                description POM_DESCRIPTION
                url POM_URL
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }

        }
    }
}